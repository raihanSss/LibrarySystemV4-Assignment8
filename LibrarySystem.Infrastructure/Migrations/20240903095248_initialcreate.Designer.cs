// <auto-generated />
using System;
using LibrarySystem.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibrarySystem.Infrastructure.Migrations
{
    [DbContext(typeof(LibrarysystemDbContext))]
    [Migration("20240903095248_initialcreate")]
    partial class initialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibrarySystem.Domain.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Book", b =>
                {
                    b.Property<int>("IdBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_book");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdBook"));

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author");

                    b.Property<int?>("Availablebook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("availablebook");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isbn");

                    b.Property<string>("Language")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("language");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("publisher");

                    b.Property<DateOnly>("Purchasedate")
                        .HasColumnType("date")
                        .HasColumnName("purchasedate");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("IdBook")
                        .HasName("book_pkey");

                    b.HasIndex(new[] { "Isbn" }, "book_isbn_key")
                        .IsUnique();

                    b.ToTable("book", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Borrow", b =>
                {
                    b.Property<int>("IdBorrow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_borrow");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdBorrow"));

                    b.Property<DateOnly?>("DateBorrow")
                        .HasColumnType("date")
                        .HasColumnName("date_borrow");

                    b.Property<DateOnly?>("DateReturn")
                        .HasColumnType("date")
                        .HasColumnName("date_return");

                    b.Property<int>("IdBook")
                        .HasColumnType("integer")
                        .HasColumnName("id_book");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<decimal?>("Penalty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("penalty");

                    b.HasKey("IdBorrow")
                        .HasName("borrow_pkey");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdUser");

                    b.ToTable("borrow", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Process", b =>
                {
                    b.Property<int>("Id_process")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_process");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_process"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("enddate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<string>("processname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("processname");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.HasKey("Id_process")
                        .HasName("process_pkey");

                    b.ToTable("process", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Request", b =>
                {
                    b.Property<int>("Id_request")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_request");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_request"));

                    b.Property<int>("Id_process")
                        .HasColumnType("integer")
                        .HasColumnName("id_process");

                    b.Property<string>("Id_requester")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id_requester");

                    b.Property<int>("Id_workflow")
                        .HasColumnType("integer")
                        .HasColumnName("id_workflow");

                    b.Property<int>("currentstepId")
                        .HasColumnType("integer")
                        .HasColumnName("currentstepid");

                    b.Property<DateTime>("requestdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requestdate");

                    b.Property<string>("requesttype")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("requesttype");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id_request")
                        .HasName("request_pkey");

                    b.HasIndex("Id_process");

                    b.HasIndex("Id_workflow");

                    b.ToTable("request", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<DateOnly>("Cardexp")
                        .HasColumnType("date")
                        .HasColumnName("cardexp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fname");

                    b.Property<string>("Librarycard")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("librarycard");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("lname");

                    b.Property<int?>("Notreturnbook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("notreturnbook");

                    b.Property<string>("Penalty")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("penalty");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("position");

                    b.HasKey("IdUser")
                        .HasName("user_pkey");

                    b.HasIndex(new[] { "Email" }, "user_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Librarycard" }, "user_librarycard_key")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Workflow", b =>
                {
                    b.Property<int>("Id_workflow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_workflow");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_workflow"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("workflowname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("workflowname");

                    b.HasKey("Id_workflow")
                        .HasName("workflow_pkey");

                    b.ToTable("workflow", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.WorkflowAction", b =>
                {
                    b.Property<int>("Id_action")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_action");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_action"));

                    b.Property<int>("Id_request")
                        .HasColumnType("integer")
                        .HasColumnName("id_request");

                    b.Property<int>("Id_step")
                        .HasColumnType("integer")
                        .HasColumnName("id_step");

                    b.Property<string>("action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("action");

                    b.Property<DateTime>("actiondate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actiondate");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.HasKey("Id_action")
                        .HasName("workflow_action_pkey");

                    b.HasIndex("Id_request");

                    b.HasIndex("Id_step");

                    b.ToTable("workflow_action", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.WorkflowSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Id_workflow")
                        .HasColumnType("integer")
                        .HasColumnName("id_workflow");

                    b.Property<string>("requiredrole")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("requiredrole");

                    b.Property<string>("stepname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stepname");

                    b.Property<int>("steporder")
                        .HasColumnType("integer")
                        .HasColumnName("steporder");

                    b.HasKey("Id")
                        .HasName("workflow_sequence_pkey");

                    b.HasIndex("Id_workflow");

                    b.ToTable("workflow_sequence", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Borrow", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Models.Book", "IdBookNavigation")
                        .WithMany("Borrows")
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("borrow_id_book_fkey");

                    b.HasOne("LibrarySystem.Domain.Models.User", "IdUserNavigation")
                        .WithMany("Borrows")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("borrow_id_user_fkey");

                    b.Navigation("IdBookNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Request", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Models.Process", "Process")
                        .WithMany("Requests")
                        .HasForeignKey("Id_process")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("request_id_process_fkey");

                    b.HasOne("LibrarySystem.Domain.Models.Workflow", "Workflow")
                        .WithMany("Requests")
                        .HasForeignKey("Id_workflow")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("request_id_workflow_fkey");

                    b.Navigation("Process");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.WorkflowAction", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Models.Request", "Request")
                        .WithMany("WorkflowActions")
                        .HasForeignKey("Id_request")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workflow_action_id_request_fkey");

                    b.HasOne("LibrarySystem.Domain.Models.WorkflowSequence", "WorkflowSequence")
                        .WithMany("WorkflowActions")
                        .HasForeignKey("Id_step")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workflow_action_id_step_fkey");

                    b.Navigation("Request");

                    b.Navigation("WorkflowSequence");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.WorkflowSequence", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Models.Workflow", "Workflow")
                        .WithMany("WorkflowSequences")
                        .HasForeignKey("Id_workflow")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workflow_sequence_id_workflow_fkey");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Book", b =>
                {
                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Process", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Request", b =>
                {
                    b.Navigation("WorkflowActions");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.User", b =>
                {
                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.Workflow", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("WorkflowSequences");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Models.WorkflowSequence", b =>
                {
                    b.Navigation("WorkflowActions");
                });
#pragma warning restore 612, 618
        }
    }
}
